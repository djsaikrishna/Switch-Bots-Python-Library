"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7577],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),d=i,f=p["".concat(l,".").concat(d)]||p[d]||y[d]||s;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,a=new Array(s);a[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:i,a[1]=o;for(var u=2;u<s;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7881:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>y,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var r=t(7462),i=(t(7294),t(3905));const s={sidebar_position:3},a="Inline queries",o={unversionedId:"interactions/inline_queries",id:"interactions/inline_queries",title:"Inline queries",description:"Switch supports inline queries. This means that you can send a query to a bot and receive a list of results from it. This is useful for things like searching for a specific item in a database, or getting a list of results from an API.",source:"@site/docs/interactions/inline_queries.md",sourceDirName:"interactions",slug:"/interactions/inline_queries",permalink:"/Switch-Bots-Python-Library/docs/interactions/inline_queries",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Keyboards",permalink:"/Switch-Bots-Python-Library/docs/interactions/keyboards"},next:{title:"Callback queries",permalink:"/Switch-Bots-Python-Library/docs/interactions/callback_queries"}},l={},u=[{value:"Inline query basics",id:"inline-query-basics",level:2},{value:"Inline query example",id:"inline-query-example",level:2}],c={toc:u},p="wrapper";function y(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"inline-queries"},"Inline queries"),(0,i.kt)("p",null,"Switch supports inline queries. This means that you can send a query to a bot and receive a list of results from it. This is useful for things like searching for a specific item in a database, or getting a list of results from an API."),(0,i.kt)("h2",{id:"inline-query-basics"},"Inline query basics"),(0,i.kt)("p",null,"Every time a user types ",(0,i.kt)("inlineCode",{parentName:"p"},"@botname")," in a chat, the bot will receive an ",(0,i.kt)("inlineCode",{parentName:"p"},"inline_query")," event. This event contains the query string and the context of where the user is using the inline query."),(0,i.kt)("p",null,"The bot can send a response to the user's inline query. This response is a list of results. Each result can be an article, a photo, a video or document."),(0,i.kt)("p",null,"Please refer to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api_reference/types/inline/inline_query_answer"},"InlineQueryAnswer")," class for more information about the available inline query result types."),(0,i.kt)("h2",{id:"inline-query-example"},"Inline query example"),(0,i.kt)("p",null,"Here is an example of how to handle an inline query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\nimport logging\nimport json\nfrom typing import Tuple\nfrom swibots import (BotApp, BotContext, MessageEvent, Message, InlineQuery,  \n                     InlineQueryEvent, RestClient, RestResponse, JSONDict,\n                     NetworkError, InlineQueryResultArticle,\n                     InputMessageContent)\n\nlogging.basicConfig(level=logging.DEBUG)\n\nlog = logging.getLogger(__name__)\n\nrestclient = RestClient()\n\n\ndef parse_response(response: Tuple[int, bytes]) -> RestResponse[JSONDict]:\n  decoded_s = response[1].decode("utf-8", "replace")\n  try:\n    jsonObject = json.loads(decoded_s)\n  except ValueError as exc:\n    jsonObject = decoded_s\n\n  response = RestResponse(jsonObject, response[0], {})\n  if response.is_error:\n    raise NetworkError(response.error_message)\n  return response\n\n\nTOKEN = "your_token"\n\napp = BotApp(TOKEN, "This is an inline query bot")\n\n@app.on_message()\nasync def on_message(ctx: BotContext[MessageEvent]):\n  message: Message = ctx.event.message\n  log.info(f"Message: {message.message}")\n  await message.reply_text(f"Echo: {message.message}")\n\n\n@app.on_inline_query()\nasync def on_inline_query(ctx: BotContext[InlineQueryEvent]):\n  query: InlineQuery = ctx.event.query\n  log.info(f"Inline query: {query.query}")\n  await query.answer(f"Searching results for {query.query}...")\n  url = f"https://en.wikipedia.org/w/api.php?action=opensearch&format=json&search={query.query}&limit=50"\n  response = parse_response(await restclient.get(url))\n  if response.status_code == 200:\n    data = response.data\n    results = []\n    for i in range(len(data[1])):\n      results.append(\n        InlineQueryResultArticle(\n          id=str(i),\n          title=data[1][i],\n          description=data[1][i],\n          input_message=InputMessageContent(data[2][i]),\n          article_url=data[3][i],\n          thumb_url=\n          "https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Wikipedia-logo-v2.svg/1200px-Wikipedia-logo-v2.svg.png",\n          thumb_width=48,\n          thumb_height=48))\n    await query.answer(results)\n  else:\n    await query.answer("There was an error while searching for results.")\n\n\napp.run()\n')))}y.isMDXComponent=!0}}]);