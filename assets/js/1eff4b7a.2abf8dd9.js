"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9603],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),y=i,d=c["".concat(l,".").concat(y)]||c[y]||m[y]||a;return t?r.createElement(d,o(o({ref:n},u),{},{components:t})):r.createElement(d,o({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},8592:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(7462),i=(t(7294),t(3905));const a={},o="InlineQuery",s={unversionedId:"api_reference/types/inline/inline_query",id:"api_reference/types/inline/inline_query",title:"InlineQuery",description:"Class swibots.api.chat.models.inline.InlineQuery",source:"@site/docs/api_reference/types/inline/inline_query.md",sourceDirName:"api_reference/types/inline",slug:"/api_reference/types/inline/inline_query",permalink:"/Switch-Bots-Python-Library/docs/api_reference/types/inline/inline_query",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Inline Types",permalink:"/Switch-Bots-Python-Library/docs/category/inline-types"},next:{title:"InlineQueryAnswer",permalink:"/Switch-Bots-Python-Library/docs/api_reference/types/inline/inline_query_answer"}},l={},p=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Example",id:"example",level:2}],u={toc:p},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"inlinequery"},"InlineQuery"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Class swibots.api.chat.models.inline.InlineQuery")),(0,i.kt)("p",null,"The InlineQuery object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results."),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"): Unique identifier for this query"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The ID of the user who sent the query"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," (",(0,i.kt)("a",{parentName:"li",href:"../user"},"User"),"): The user who sent the query"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"community_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The ID of the community where the query was sent"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"community")," (",(0,i.kt)("a",{parentName:"li",href:"../community"},"Community"),"): The community where the query was sent"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The ID of the group where the query was sent"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group")," (",(0,i.kt)("a",{parentName:"li",href:"../group"},"Group"),"): The group where the query was sent"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channel_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The ID of the channel where the query was sent"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channel")," (",(0,i.kt)("a",{parentName:"li",href:"../channel"},"Channel"),"): The channel where the query was sent"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"): Unique identifier for this query"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"offset")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"): Offset of the results to be returned, can be controlled by the bot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"): Text of the query (up to 256 characters)")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"answer(response: ",(0,i.kt)("a",{parentName:"em",href:"./inline_query_answer"},"InlineQueryAnswer"),"]) -> bool:")),"\nUse this method to send answers to an inline query. On success, True is returned.\nNo more than 50 results per query are allowed.")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import logging\nimport json\nfrom typing import Tuple\nfrom swibots import (BotApp, BotContext, MessageEvent, Message, InlineQuery,  \n                     InlineQueryEvent, RestClient, RestResponse, JSONDict,\n                     NetworkError, InlineQueryResultArticle,\n                     InputMessageContent)\n\nlogging.basicConfig(level=logging.DEBUG)\n\nlog = logging.getLogger(__name__)\n\nrestclient = RestClient()\n\n\ndef parse_response(response: Tuple[int, bytes]) -> RestResponse[JSONDict]:\n  decoded_s = response[1].decode("utf-8", "replace")\n  try:\n    jsonObject = json.loads(decoded_s)\n  except ValueError as exc:\n    jsonObject = decoded_s\n\n  response = RestResponse(jsonObject, response[0], {})\n  if response.is_error:\n    raise NetworkError(response.error_message)\n  return response\n\n\nTOKEN = "your_token"\n\napp = BotApp(TOKEN, "This is an inline query bot")\n\n@app.on_message()\nasync def on_message(ctx: BotContext[MessageEvent]):\n  message: Message = ctx.event.message\n  log.info(f"Message: {message.message}")\n  await message.reply_text(f"Echo: {message.message}")\n\n\n@app.on_inline_query()\nasync def on_inline_query(ctx: BotContext[InlineQueryEvent]):\n  query: InlineQuery = ctx.event.query\n  log.info(f"Inline query: {query.query}")\n  await query.answer(f"Searching results for {query.query}...")\n  url = f"https://en.wikipedia.org/w/api.php?action=opensearch&format=json&search={query.query}&limit=50"\n  response = parse_response(await restclient.get(url))\n  if response.status_code == 200:\n    data = response.data\n    results = []\n    for i in range(len(data[1])):\n      results.append(\n        InlineQueryResultArticle(\n          id=str(i),\n          title=data[1][i],\n          description=data[1][i],\n          input_message=InputMessageContent(data[2][i]),\n          article_url=data[3][i],\n          thumb_url=\n          "https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Wikipedia-logo-v2.svg/1200px-Wikipedia-logo-v2.svg.png",\n          thumb_width=48,\n          thumb_height=48))\n    await query.answer(results)\n  else:\n    await query.answer("There was an error while searching for results.")\n\n\napp.run()\n\n\n')))}m.isMDXComponent=!0}}]);