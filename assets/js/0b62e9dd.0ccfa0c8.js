"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4527],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>u});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},h=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,h=d(e,["components","mdxType","originalType","parentName"]),s=p(t),c=l,u=s["".concat(o,".").concat(c)]||s[c]||m[c]||r;return t?a.createElement(u,i(i({ref:n},h),{},{components:t})):a.createElement(u,i({ref:n},h))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=c;var d={};for(var o in n)hasOwnProperty.call(n,o)&&(d[o]=n[o]);d.originalType=e,d[s]="string"==typeof e?e:l,i[1]=d;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8516:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var a=t(7462),l=(t(7294),t(3905));const r={sidebar_position:3},i="Handlers",d={unversionedId:"fundamentals/handlers",id:"fundamentals/handlers",title:"Handlers",description:"Handlers are functions that are called when an event is triggered. Handlers are registered with the calling add_handler funciton of app or using decorators.",source:"@site/docs/fundamentals/handlers.md",sourceDirName:"fundamentals",slug:"/fundamentals/handlers",permalink:"/Switch-Bots-Python-Library/docs/fundamentals/handlers",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Events",permalink:"/Switch-Bots-Python-Library/docs/fundamentals/events"},next:{title:"Decorator Handlers",permalink:"/Switch-Bots-Python-Library/docs/fundamentals/decorators"}},o={},p=[{value:"Handler functions",id:"handler-functions",level:2},{value:"Creating handlers",id:"creating-handlers",level:2},{value:"Registering handlers",id:"registering-handlers",level:2},{value:"Chat handlers",id:"chat-handlers",level:2},{value:"Message Handler",id:"message-handler",level:3},{value:"Properties",id:"properties",level:4},{value:"Example",id:"example",level:4},{value:"Command Handler",id:"command-handler",level:3},{value:"Properties",id:"properties-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Callback Query Handler",id:"callback-query-handler",level:3},{value:"Properties",id:"properties-2",level:4},{value:"Example",id:"example-2",level:4},{value:"Inline Query Handler",id:"inline-query-handler",level:3},{value:"Properties",id:"properties-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Community handlers",id:"community-handlers",level:2},{value:"Community Updated Handler",id:"community-updated-handler",level:3},{value:"Properties",id:"properties-4",level:4},{value:"Example",id:"example-4",level:4},{value:"Member Joined Handler",id:"member-joined-handler",level:3},{value:"Properties",id:"properties-5",level:4},{value:"Example",id:"example-5",level:4},{value:"Member Left Handler",id:"member-left-handler",level:3},{value:"Properties",id:"properties-6",level:4},{value:"Example",id:"example-6",level:4},{value:"Channel Updated Handler",id:"channel-updated-handler",level:3},{value:"Properties",id:"properties-7",level:4},{value:"Example",id:"example-7",level:4},{value:"Channel Created Handler",id:"channel-created-handler",level:3},{value:"Properties",id:"properties-8",level:4},{value:"Example",id:"example-8",level:4},{value:"Channel Deleted Handler",id:"channel-deleted-handler",level:3},{value:"Properties",id:"properties-9",level:4},{value:"Example",id:"example-9",level:4},{value:"Group Updated Handler",id:"group-updated-handler",level:3},{value:"Properties",id:"properties-10",level:4},{value:"Example",id:"example-10",level:4},{value:"Group Created Handler",id:"group-created-handler",level:3},{value:"Properites",id:"properites",level:4},{value:"Example",id:"example-11",level:4},{value:"Group Deleted Handler",id:"group-deleted-handler",level:3},{value:"Properties",id:"properties-11",level:4},{value:"Example",id:"example-12",level:4},{value:"User Banned Handler",id:"user-banned-handler",level:3},{value:"Properties",id:"properties-12",level:4},{value:"Example",id:"example-13",level:4}],h={toc:p},s="wrapper";function m(e){let{components:n,...t}=e;return(0,l.kt)(s,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"handlers"},"Handlers"),(0,l.kt)("p",null,"Handlers are functions that are called when an event is triggered. Handlers are registered with the calling ",(0,l.kt)("inlineCode",{parentName:"p"},"add_handler")," funciton of app or using ",(0,l.kt)("a",{parentName:"p",href:"./decorators"},(0,l.kt)("inlineCode",{parentName:"a"},"decorators")),"."),(0,l.kt)("h2",{id:"handler-functions"},"Handler functions"),(0,l.kt)("p",null,"Handler functions are functions that are called when an event is triggered. They are registered with the ",(0,l.kt)("inlineCode",{parentName:"p"},"add_handler")," function of the app.\nThe function must accept a single argument, which is the ",(0,l.kt)("a",{parentName:"p",href:"./context"},(0,l.kt)("inlineCode",{parentName:"a"},"BotContext"))," containig the info of the bot and the event."),(0,l.kt)("p",null,"There are one handler class for each event type. The handler class name is the same as the event class, but with the ",(0,l.kt)("inlineCode",{parentName:"p"},"Handler")," suffix."),(0,l.kt)("h2",{id:"creating-handlers"},"Creating handlers"),(0,l.kt)("p",null,"All handlers can be created calling the constructor of the handler class. The constructor accepts two arguments: the handler function, and a ",(0,l.kt)("a",{parentName:"p",href:"./filters"},"filter")," or a group of filters."),(0,l.kt)("p",null,"Each handler receives function (the first argument of the Handler) receives a BotContext","[T]"," (where T is one of the EventTypes) as an argument. The BotContext contains the bot and the event that triggered the handler."),(0,l.kt)("p",null,"To define a handler callback function you must use the ",(0,l.kt)("inlineCode",{parentName:"p"},"async def")," syntax, and the function must accept a single argument, which is the BotContext","[T]"," of the event."),(0,l.kt)("p",null,"This is an example of how to create a handler function for each type of event:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from swibots import BotContext, MessageEvent\n\napp = BotApp("token", "your bot description")\n\nasync def message_handler(ctx: BotContext[MessageEvent]):\n    await m.reply_text(f"Thank you! I received your message: {ctx.event.message.message}")\n\napp.add_handler(MessageHandler(message_handler))\n\nasync def command_handler(ctx: BotContext[CommandEvent]):\n    await m.reply_text(f"Thank you! I received your command: {ctx.event.command}")\n\napp.add_handler(CommandHandler(command_handler))\n\napp.run()\n')),(0,l.kt)("h2",{id:"registering-handlers"},"Registering handlers"),(0,l.kt)("p",null,"Handlers are registered with the ",(0,l.kt)("inlineCode",{parentName:"p"},"add_handler")," function of the app. The function accepts a single argument, which is the handler function."),(0,l.kt)("p",null,"This is an example of how to register a handler function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from swibots import BotApp, MessageHandler\n\napp = BotApp("token", "your bot description")\n\nasync def message_handler(ctx: BotContext[MessageEvent]):\n    await m.reply_text(f"Thank you! I received your message: {ctx.event.message.message}")\n\napp.add_handler(MessageHandler(message_handler))\n\napp.run()\n')),(0,l.kt)("h2",{id:"chat-handlers"},"Chat handlers"),(0,l.kt)("h3",{id:"message-handler"},"Message Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"MessageHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"MessageEvent"),". It is called when a message is sent to a chat."),(0,l.kt)("h4",{id:"properties"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[MessageEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from swibots import MessageHandler, MessageEvent\n\n# create app and call it app\n\n# handler callback function\nasync def message_handler(context: BotContext[MessageEvent]):\n    message = context.event.message\n    await message.reply_text("Hello world!")\n\n# register handler\napp.add_handler(MessageHandler(message_handler))\n')),(0,l.kt)("h3",{id:"command-handler"},"Command Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"CommandHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"CommandEvent"),". It is called when a command is sent to a chat."),(0,l.kt)("h4",{id:"properties-1"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"command")," (",(0,l.kt)("inlineCode",{parentName:"li"},"str")," | ",(0,l.kt)("inlineCode",{parentName:"li"},"List[str]"),"): The command that will be used to filter the event. If a list is passed, the handler will be called if any of the commands is found."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[CommandEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom swibots import CommandHandler, CommandEvent\n\n# create app and call it app\n\n# handler callback function\nasync def command_handler(context: BotContext[CommandEvent]):\n    message = context.event.message\n    await message.reply_text("Hello world!")\n\n# register handler\napp.add_handler(CommandHandler("hello", command_handler))\n')),(0,l.kt)("h3",{id:"callback-query-handler"},"Callback Query Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"CallbackQueryHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"CallbackQueryEvent"),". It is called when a callback query is sent to a chat (the user pressed a button of the reply markup for example)."),(0,l.kt)("h4",{id:"properties-2"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[CallbackQueryEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom swibots import CallbackQueryHandler, CallbackQueryEvent\n\n# create app and call it app\n\n# handler callback function\nasync def callback_query_handler(context: BotContext[CallbackQueryEvent]):\n    message = context.event.message\n    await message.reply_text("Hello world!")\n\n# register handler\napp.add_handler(CallbackQueryHandler(callback_query_handler))\n')),(0,l.kt)("h3",{id:"inline-query-handler"},"Inline Query Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"InlineQueryHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"InlineQueryEvent"),". It is called when an inline query is sent to a chat."),(0,l.kt)("h4",{id:"properties-3"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[InlineQueryEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-3"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom swibots import InlineQueryHandler, InlineQueryEvent\n\n# create app and call it app\n\n# handler callback function\nasync def inline_query_handler(context: BotContext[InlineQueryEvent]):\n    query: InlineQuery = ctx.event.query\n    await query.answer(f"Searching results for {query.query}...")\n    # ... search results and send them\n\n# register handler\napp.add_handler(InlineQueryHandler(inline_query_handler))\n')),(0,l.kt)("h2",{id:"community-handlers"},"Community handlers"),(0,l.kt)("h3",{id:"community-updated-handler"},"Community Updated Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"CommunityUpdatedHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"CommunityUpdatedEvent"),". It is called when a community is updated."),(0,l.kt)("h4",{id:"properties-4"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[CommunityUpdatedEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-4"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom swibots import CommunityUpdatedHandler, CommunityUpdatedEvent\n\n# create app and call it app\n\n# handler callback function\nasync def community_updated_handler(context: BotContext[CommunityUpdatedEvent]):\n    community: Community = ctx.event.community\n    # ... do something with the community\n\n# register handler\napp.add_handler(CommunityUpdatedHandler(community_updated_handler))\n")),(0,l.kt)("h3",{id:"member-joined-handler"},"Member Joined Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"MemberJoinedHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"MemberJoinedEvent"),". It is called when a member joins a community."),(0,l.kt)("h4",{id:"properties-5"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[MemberJoinedEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-5"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom swibots import MemberJoinedHandler, MemberJoinedEvent\n\n# create app and call it app\n\n# handler callback function\nasync def member_joined_handler(context: BotContext[MemberJoinedEvent]):\n    member: User = ctx.event.user # the user that joined the community\n    # ... do something with the member\n\n# register handler\napp.add_handler(MemberJoinedHandler(member_joined_handler))\n")),(0,l.kt)("h3",{id:"member-left-handler"},"Member Left Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"MemberLeftHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"MemberLeftEvent"),". It is called when a member leaves a community."),(0,l.kt)("h4",{id:"properties-6"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[MemberLeftEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-6"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom swibots import MemberLeftHandler, MemberLeftEvent\n\n# create app and call it app\n\n# handler callback function\nasync def member_left_handler(context: BotContext[MemberLeftEvent]):\n    member: User = ctx.event.user # the user that left the community\n    # ... do something with the member\n\n# register handler\napp.add_handler(MemberLeftHandler(member_left_handler))\n")),(0,l.kt)("h3",{id:"channel-updated-handler"},"Channel Updated Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ChannelUpdatedHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"ChannelUpdatedEvent"),". It is called when a channel is updated."),(0,l.kt)("h4",{id:"properties-7"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[ChannelUpdatedEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-7"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom swibots import ChannelUpdatedHandler, ChannelUpdatedEvent\n\n# create app and call it app\n\n# handler callback function\nasync def channel_updated_handler(context: BotContext[ChannelUpdatedEvent]):\n    channel: Channel = ctx.event.channel\n    # ... do something with the channel\n\n# register handler\napp.add_handler(ChannelUpdatedHandler(channel_updated_handler))\n")),(0,l.kt)("h3",{id:"channel-created-handler"},"Channel Created Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ChannelCreatedHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"ChannelCreatedEvent"),". It is called when a channel is created."),(0,l.kt)("h4",{id:"properties-8"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[ChannelCreatedEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-8"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom swibots import ChannelCreatedHandler, ChannelCreatedEvent\n\n# create app and call it app\n\n# handler callback function\nasync def channel_created_handler(context: BotContext[ChannelCreatedEvent]):\n    channel: Channel = ctx.event.channel\n    # ... do something with the channel\n\n# register handler\napp.add_handler(ChannelCreatedHandler(channel_created_handler))\n")),(0,l.kt)("h3",{id:"channel-deleted-handler"},"Channel Deleted Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ChannelDeletedHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"ChannelDeletedEvent"),". It is called when a channel is deleted."),(0,l.kt)("h4",{id:"properties-9"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[ChannelDeletedEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-9"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom swibots import ChannelDeletedHandler, ChannelDeletedEvent\n\n# create app and call it app\n\n# handler callback function\n\nasync def channel_deleted_handler(context: BotContext[ChannelDeletedEvent]):\n    channel: Channel = ctx.event.channel\n    # ... do something with the channel\n\n# register handler\napp.add_handler(ChannelDeletedHandler(channel_deleted_handler))\n")),(0,l.kt)("h3",{id:"group-updated-handler"},"Group Updated Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"GroupUpdatedHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"GroupUpdatedEvent"),". It is called when a group is updated."),(0,l.kt)("h4",{id:"properties-10"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[GroupUpdatedEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-10"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom swibots import GroupUpdatedHandler, GroupUpdatedEvent\n\n# create app and call it app\n\n# handler callback function\nasync def group_updated_handler(context: BotContext[GroupUpdatedEvent]):\n    group: Group = ctx.event.group\n    # ... do something with the group\n\n# register handler\napp.add_handler(GroupUpdatedHandler(group_updated_handler))\n")),(0,l.kt)("h3",{id:"group-created-handler"},"Group Created Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"GroupCreatedHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"GroupCreatedEvent"),". It is called when a group is created."),(0,l.kt)("h4",{id:"properites"},"Properites"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[GroupCreatedEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-11"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom swibots import GroupCreatedHandler, GroupCreatedEvent\n\n# create app and call it app\n\n# handler callback function\nasync def group_created_handler(context: BotContext[GroupCreatedEvent]):\n    group: Group = ctx.event.group\n    # ... do something with the group\n\n# register handler\n\napp.add_handler(GroupCreatedHandler(group_created_handler))\n")),(0,l.kt)("h3",{id:"group-deleted-handler"},"Group Deleted Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"GroupDeletedHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"GroupDeletedEvent"),". It is called when a group is deleted."),(0,l.kt)("h4",{id:"properties-11"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[GroupDeletedEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-12"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom swibots import GroupDeletedHandler, GroupDeletedEvent\n\n# create app and call it app\n\n# handler callback function\nasync def group_deleted_handler(context: BotContext[GroupDeletedEvent]):\n    group: Group = ctx.event.group\n    # ... do something with the group\n\n# register handler\napp.add_handler(GroupDeletedHandler(group_deleted_handler))\n")),(0,l.kt)("h3",{id:"user-banned-handler"},"User Banned Handler"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"UserBannedHandler")," is a handler for the ",(0,l.kt)("inlineCode",{parentName:"p"},"UserBannedEvent"),". It is called when a user is banned from a group."),(0,l.kt)("h4",{id:"properties-12"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Callable[[BotContext[UserBannedEvent]], Awaitable]"),"): The callback function that will be called when the event is triggered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter")," (",(0,l.kt)("inlineCode",{parentName:"li"},"Filter"),", optional): The filter that will be used to filter the event. (Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),")")),(0,l.kt)("h4",{id:"example-13"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom swibots import UserBannedHandler, UserBannedEvent\n\n# create app and call it app\n\n# handler callback function\n\nasync def user_banned_handler(context: BotContext[UserBannedEvent]):\n    user: User = ctx.event.user\n    group: Group = ctx.event.group # or ctx.event.channel if the user was banned from a channel\n    # ... do something with the user and the group \n\n# register handler\napp.add_handler(UserBannedHandler(user_banned_handler))\n")))}m.isMDXComponent=!0}}]);