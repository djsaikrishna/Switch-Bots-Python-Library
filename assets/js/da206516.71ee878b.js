"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4713],{3905:(e,n,a)=>{a.d(n,{Zo:()=>m,kt:()=>f});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=t.createContext({}),d=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},m=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=d(a),u=o,f=p["".concat(s,".").concat(u)]||p[u]||c[u]||r;return a?t.createElement(f,l(l({ref:n},m),{},{components:a})):t.createElement(f,l({ref:n},m))}));function f(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var d=2;d<r;d++)l[d]=a[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8091:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var t=a(7462),o=(a(7294),a(3905));const r={},l="download_media",i={unversionedId:"api_reference/methods/download_media",id:"api_reference/methods/download_media",title:"download_media",description:"Download a media file from a message.",source:"@site/docs/api_reference/methods/download_media.md",sourceDirName:"api_reference/methods",slug:"/api_reference/methods/download_media",permalink:"/Switch-Bots-Python-Library/docs/api_reference/methods/download_media",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"delete_sticker_pack",permalink:"/Switch-Bots-Python-Library/docs/api_reference/methods/delete_sticker_pack"},next:{title:"edit_message",permalink:"/Switch-Bots-Python-Library/docs/api_reference/methods/edit_message"}},s={},d=[{value:"Signature",id:"signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2}],m={toc:d},p="wrapper";function c(e){let{components:n,...a}=e;return(0,o.kt)(p,(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"download_media"},"download_media"),(0,o.kt)("p",null,"Download a media file from a message."),(0,o.kt)("h2",{id:"signature"},"Signature"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"async def download_media(message: Message, file_name: str = DOWNLOAD_MEDIA, in_memory: bool = False, block: bool = True, progress: DownloadProgressCallback = None, progress_args: tuple = ()) -> Optional[Union[BinaryIO, bytes]]:")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"message")," (",(0,o.kt)("a",{parentName:"li",href:"../types/message"},"Message"),"): The message to download the media\nfrom"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"file_name")," (str): The file name to save the media to. If ",(0,o.kt)("inlineCode",{parentName:"li"},"in_memory")," is\n",(0,o.kt)("inlineCode",{parentName:"li"},"True"),", this parameter is ignored."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"in_memory")," (bool): Whether to download the media to memory or to a file.\nDefaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"block")," (bool): Whether to block the current thread until the download is\ncomplete. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"progress"),"\n(",(0,o.kt)("a",{parentName:"li",href:"/Switch-Bots-Python-Library/docs/api_reference/functions#downloadprogresscallback"},"DownloadProgressCallback"),"): A\ncallback function that is called when the download progress changes. Defaults\nto ",(0,o.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"progress_args")," (tuple): Additional arguments to pass to the ",(0,o.kt)("inlineCode",{parentName:"li"},"progress"),"\ncallback function. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"()"),".")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from swibots import (\n    BotApp,\n    Message,\n    DownloadProgress,\n)\n\nTOKEN = "YOUR_TOKEN_HERE"\n\napp = BotApp(\n    TOKEN,\n    "A cool bot with annotations and everything you could possibly want :)"\n)\n\n\n@app.on_message()\nasync def on_message(message: Message):\n    # Download the media to a file\n    await message.download_media("my_media.jpg")\n\n    # Download the media to memory\n    media = await message.download_media(in_memory=True)\n\n    # Download the media to a file and print the download progress\n    async def progress_callback(progress: DownloadProgress):\n        print(f"Downloaded {progress.downloaded} of {progress.total} bytes")\n\n    await message.download("my_media.jpg", progress=progress_callback)\n\n    # Download the media to memory and print the download progress\n    async def progress_callback(progress: DownloadProgress):\n        print(f"Downloaded {progress.downloaded} of {progress.total} bytes")\n\n    media = await message.download(in_memory=True, progress=progress_callback)\n\n    # Download the media to a file and cancel the download\n    client = await message.download("my_media.jpg", block=False)\n    client.cancel()\n\n    # Download the media to memory and cancel the download\n    client = await message.download(in_memory=True, block=False)\n    client.cancel()\n\n\napp.run()\n')))}c.isMDXComponent=!0}}]);