"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1611],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>N});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var m=n.createContext({}),p=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},o=function(e){var t=p(e.components);return n.createElement(m.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),d=p(a),u=i,N=d["".concat(m,".").concat(u)]||d[u]||k[u]||r;return a?n.createElement(N,l(l({ref:t},o),{},{components:a})):n.createElement(N,l({ref:t},o))}));function N(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[d]="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6001:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>k,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const r={},l="Message",s={unversionedId:"api_reference/types/message",id:"api_reference/types/message",title:"Message",description:"Class swibots.api.chat.models.User",source:"@site/docs/api_reference/types/message.md",sourceDirName:"api_reference/types",slug:"/api_reference/types/message",permalink:"/Switch-Bots-Python-Library/docs/api_reference/types/message",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Media",permalink:"/Switch-Bots-Python-Library/docs/api_reference/types/media"},next:{title:"RestrictedUser",permalink:"/Switch-Bots-Python-Library/docs/api_reference/types/restricteduser"}},m={},p=[{value:"Properties",id:"properties",level:2},{value:"Api Methods",id:"api-methods",level:2}],o={toc:p},d="wrapper";function k(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"message"},"Message"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Class swibots.api.chat.models.User")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Message")," class represents a message sent to a chat."),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's id."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's sender's id."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," (",(0,i.kt)("a",{parentName:"li",href:"./user"},"User"),"): The message's sender."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"receiver_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's receiver's id."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"receiver")," (",(0,i.kt)("a",{parentName:"li",href:"./user"},"User"),"): The message's receiver."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"message")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"): The message's text."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sent_date")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's sent date."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"status")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's status."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's request id."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channel_chat")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),"): Whether the message is a channel chat."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channel_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's channel's id."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channel")," (",(0,i.kt)("a",{parentName:"li",href:"./channel"},"Channel"),"): The message's channel."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"community_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's community's id."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"community")," (",(0,i.kt)("a",{parentName:"li",href:"./community"},"Community"),"): The message's community."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"edit")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),"): Whether the message is an edit."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flag")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's flag."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"forward")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),"): Whether the message is a forward."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group_chat")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),"): Whether the message is a group chat."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's group's id."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group")," (",(0,i.kt)("a",{parentName:"li",href:"./group"},"Group"),"): The message's group."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"information")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"): The message's information."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"inline_markup")," (",(0,i.kt)("a",{parentName:"li",href:"./inline_markup"},"InlineMarkup"),"): The message's inline markup."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is_read")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),"): Whether the message is read."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is_media")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),"): Whether message includes media."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is_embed_message")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),"): Whether message includes embedded."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"embed_message"),": (",(0,i.kt)("a",{parentName:"li",href:"/Switch-Bots-Python-Library/docs/api_reference/types/embedded_media"},"EmbeddedMedia"),"): The embedded message. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"media_link")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"): The message's media link."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"replied_message")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"): The message's replied message."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"replied_to_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's replied to id."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"replied_to")," (",(0,i.kt)("a",{parentName:"li",href:"./message"},"Message"),"): The message's replied to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"replies")," (",(0,i.kt)("a",{parentName:"li",href:"./message"},"Message"),"): The message's replies."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"reply_count")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's reply count."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"personal_chat")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),"): Whether the message is a personal chat."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pinned")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),"): Whether the message is pinned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"reactions")," (",(0,i.kt)("inlineCode",{parentName:"li"},"List[str]"),"): The message's reactions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"media_id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"): The message's media id. (for media messages)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"media_info")," (",(0,i.kt)("a",{parentName:"li",href:"./media"},"Media"),"): The message's media. (for media messages)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cached_media")," (",(0,i.kt)("a",{parentName:"li",href:"./media"},"Media"),"): When sending a message, you can use this to send media that has already been uploaded to the server. (for media messages)")),(0,i.kt)("h2",{id:"api-methods"},"Api Methods"),(0,i.kt)("p",null,"Unlike other types, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Message")," class has a few api methods to make it easier to work with."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"async def respond(self,  text: str, embed_message: ",(0,i.kt)("a",{parentName:"em",href:"/Switch-Bots-Python-Library/docs/api_reference/types/embedded_media"},"EmbeddedMedia")," = None, inline_markup: ",(0,i.kt)("a",{parentName:"em",href:"/Switch-Bots-Python-Library/docs/api_reference/types/inline_markup"},"InlineMarkup"),") -> Message "))," ")),(0,i.kt)("p",{parentName:"li"},"  Sends the message."),(0,i.kt)("p",{parentName:"li"},"  You can also add media.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"async def reply(self, text: str, embed_message: ",(0,i.kt)("a",{parentName:"em",href:"/Switch-Bots-Python-Library/docs/api_reference/types/embedded_media"},"EmbeddedMedia")," = None) -> Message "))," ")),(0,i.kt)("p",{parentName:"li"},"  Replies to the message with the given message."),(0,i.kt)("p",{parentName:"li"},"  You can also add media.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"async def reply_text(self,  text: str, inline_markup: Optional[",(0,i.kt)("a",{parentName:"em",href:"./inline_markup"},"InlineMarkup"),"] = None,  media: MediaUploadRequest = None) -> Message ")))),(0,i.kt)("p",{parentName:"li"},"  Replies to the message with the given text."),(0,i.kt)("p",{parentName:"li"},"  You can also add an inline markup and media.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"async edit_text(self,  text: str, inline_markup: Optional[",(0,i.kt)("a",{parentName:"em",href:"./inline_markup"},"InlineMarkup"),"] = None) -> Message ")))),(0,i.kt)("p",{parentName:"li"},"  Edits the message's text."),(0,i.kt)("p",{parentName:"li"},"  You can also add an inline markup.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"async def delete(self) -> None "))," ")),(0,i.kt)("p",{parentName:"li"},"  Deletes the message.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"async def download(self, file_name: str = None, in_memory: bool = False, block: bool = True, progress: Callable = None, progress_args: tuple = ()) -> Optional[Union","[BinaryIO, bytes]","]:")))),(0,i.kt)("p",{parentName:"li"},"  Downloads the message's media (Please refer to ",(0,i.kt)("a",{parentName:"p",href:"/docs/api_reference/methods/download_media"},"Downloading media"),")."))))}k.isMDXComponent=!0}}]);